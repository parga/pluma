{"version":3,"sources":["components/Header.tsx","hooks/useQuestions.tsx","components/Home.tsx","components/Question.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["messages","defineMessages","language","id","defaultMessage","spanish","english","Header","setLocale","locale","formatMessage","useIntl","className","htmlFor","onChange","event","target","value","firstNameQuestion","occupationQuestion","doYouHaveChildrenQuestion","howManyChildrenQuestion","emailQuestion","Home","history","useHistory","onClick","url","push","previous","next","Question","question","label","navigate","Main","questions","intl","useQuestions","map","i","path","englishDictionary","spanishDictionary","App","useState","setlocale","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aeb5a319.chunk.js","sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst messages = defineMessages({\n    language: {\n        id: 'Header.language',\n        defaultMessage: 'Language:'\n    },\n    spanish: {\n        id: 'Header.spanish',\n        defaultMessage: 'Spanish'\n    },\n    english: {\n        id: 'Header.english',\n        defaultMessage: 'English'\n    }\n})\n\ninterface HeaderProps {\n  setLocale: React.Dispatch<React.SetStateAction<string>>\n  locale: string;\n}\n\nexport function Header ({setLocale, locale}: HeaderProps) {\n    const {formatMessage} = useIntl();\n    const handleOnChange = (event) => {\n        setLocale(event.target.value);\n    }\n    return (\n        <header className=\"App-header\">\n        <label htmlFor=\"cars\">{formatMessage(messages.language)}</label>\n        <select className=\"p-select\" id=\"cars\" onChange={handleOnChange} value={locale}>\n            <option value=\"es\">{formatMessage(messages.spanish)}</option>\n            <option value=\"en\">{formatMessage(messages.english)}</option>\n        </select>\n        </header>\n    );\n}\n\n","import {defineMessages, IntlShape} from 'react-intl';\n\nexport interface Question {\n  id: string;\n  next?: string;\n  previous?: string;\n  question?: string;\n}\n\ninterface useQuestionsParams {\n  intl: IntlShape\n}\n\nconst messages = defineMessages({\n  firstNameQuestion: {\n    id: 'App.firstNameQuestion',\n    defaultMessage: `What's your fist name?`\n  },\n  occupationQuestion: {\n    id: 'App.occupation',\n    defaultMessage: `What's your occupation?`\n  },\n  doYouHaveChildrenQuestion: {\n    id: 'App.doYouHaveChildrenQuestion',\n    defaultMessage: `Do you have children?`\n  },\n  howManyChildrenQuestion: {\n    id: 'App.howManyChildrenQuestion',\n    defaultMessage: `How many children do you have?`\n  },\n  emailQuestion: {\n    id: 'App.emailQuestion',\n    defaultMessage: `What's your email?`\n  }\n});\n\nexport function useQuestions({intl}: useQuestionsParams): Question[] {\n  const {formatMessage} = intl;\n  return  [\n    {\n      id: 'firstName',\n      previous: '/',\n      next: 'occupation',\n      question: formatMessage(messages.firstNameQuestion)\n    },\n    {\n      id: 'occupation',\n      previous: 'firstName',\n      next: 'children',\n      question: formatMessage(messages.occupationQuestion)\n    },\n    {\n      id: 'children',\n      previous: 'occupation',\n      next: 'howMany',\n      question: formatMessage(messages.doYouHaveChildrenQuestion)\n    },\n    {\n      id: 'howMany',\n      previous: 'children',\n      next: 'emailAddress',\n      question: formatMessage(messages.howManyChildrenQuestion)\n    },\n    {\n      id: 'emailAddress',\n      previous: 'howMany',\n      next: 'save',\n      question: formatMessage(messages.emailQuestion)\n    }\n  ];\n}\n","import { useHistory } from \"react-router-dom\";\n\nexport function Home () {\n  const history = useHistory();\n  const navigate = (url) => history.push(url);\n  return (<>\n    <button className='p-btn--primary' onClick={() => navigate(\"/firstName\")}>Let's start</button>\n  </>)\n}\n","import { ReactElement } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { Question as QuestionType } from '../hooks/useQuestions'\n\ninterface QuestionParams {\n  question: QuestionType\n}\n\nconst messages = defineMessages({\n    previous: {\n        id: 'Question.previous',\n        defaultMessage: '< Previous'\n    },\n    next: {\n        id: 'Question.next',\n        defaultMessage: 'Next >'\n    }\n})\n\nexport function Question ({question}: QuestionParams): ReactElement {\n  const {previous, next, question: label} = question;\n  const {formatMessage} = useIntl();\n  const history = useHistory();\n  const navigate = (url) => history.push(url);\n\n  return (<>\n    <div>{label}</div>\n    <button className='p-btn--primary' onClick={() => navigate(previous)}>{formatMessage(messages.previous)}</button>\n    <button className='p-btn--primary' onClick={() => navigate(next)}>{formatMessage(messages.next)}</button>\n  </>\n  )\n}\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { Route, Switch } from 'react-router-dom';\nimport { useQuestions } from '../hooks/useQuestions';\nimport { Home } from './Home';\nimport { Question } from './Question';\n\nexport function Main() {\n  const intl = useIntl();\n  const questions = useQuestions({intl});\n  return (\n    <Switch>\n      {questions.map((question, i) =>(\n        <Route key={i} path={`/${question.id}`} >\n          <Question question={question} />\n        </Route>\n      ))}\n      <Route path=\"/\" >\n        <Home />\n      </Route>\n    </Switch>\n  )\n}\n","import React, { ReactElement, useState } from 'react';\nimport './App.css';\nimport '@popsure/dirty-swan/dist/index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport {default as englishDictionary} from './__locales__/en.json';\nimport {default as spanishDictionary} from './__locales__/es.json';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\n\nconst messages = {\n  'en': englishDictionary,\n  'es': spanishDictionary\n}\n\n\nfunction App(): ReactElement {\n  const [locale, setlocale] = useState('en');\n  return (\n    <IntlProvider locale={locale} messages={messages[locale]}>\n      <Router basename=\"/pluma\">\n        <Header setLocale={setlocale} locale={locale}/>\n        <Main />\n      </Router>\n    </IntlProvider>\n  );\n}\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header.tsx","hooks/useQuestions.tsx","components/Home.tsx","components/Question.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["messages","defineMessages","language","id","defaultMessage","spanish","english","Header","setLocale","locale","formatMessage","useIntl","className","src","aria-label","htmlFor","onChange","event","target","value","firstNameQuestion","occupationQuestion","doYouHaveChildrenQuestion","howManyChildrenQuestion","emailQuestion","signIn","signInEmail","emailPlaceholder","continue","Home","history","useHistory","type","placeholder","onClick","url","push","previous","next","Question","question","label","navigate","inputField","input","Text","currentValue","Radio","options","map","option","i","checked","Main","questions","intl","useState","firstName","setFirstName","occupation","setOccupation","children","setChildren","howMany","setHowMany","email","setEmail","useQuestions","path","englishDictionary","spanishDictionary","App","setlocale","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fefe4d96.chunk.js","sourcesContent":["import React from \"react\";\nimport { defineMessages, useIntl } from \"react-intl\";\n\nconst messages = defineMessages({\n  language: {\n    id: \"Header.language\",\n    defaultMessage: \"Language:\",\n  },\n  spanish: {\n    id: \"Header.spanish\",\n    defaultMessage: \"Spanish\",\n  },\n  english: {\n    id: \"Header.english\",\n    defaultMessage: \"English\",\n  },\n});\n\ninterface HeaderProps {\n  setLocale: React.Dispatch<React.SetStateAction<string>>;\n  locale: string;\n}\n\nexport function Header({ setLocale, locale }: HeaderProps) {\n  const { formatMessage } = useIntl();\n  const handleOnChange = (event) => {\n    setLocale(event.target.value);\n  };\n  return (\n    <header className=\"header-container\">\n      <div className=\"header\">\n        <div className=\"logo\">\n          <img\n            src=\"https://feather-insurance.com/_next/static/media/logo.0d69221106425e5288907e514db23d99.svg\"\n            aria-label=\"Home\"\n          />\n          <div className=\"name\">\n            <h1 className=\"p-h1\">Pluma</h1>\n          </div>\n        </div>\n        <div className=\"language-selector-box\">\n          <label htmlFor=\"language-selector\">\n            {formatMessage(messages.language)}\n          </label>\n          <select\n            className=\"p-select\"\n            id=\"language-selector\"\n            onChange={handleOnChange}\n            value={locale}\n          >\n            <option value=\"es\">{formatMessage(messages.spanish)}</option>\n            <option value=\"en\">{formatMessage(messages.english)}</option>\n          </select>\n        </div>\n      </div>\n    </header>\n  );\n}\n","import { useState } from 'react';\nimport {defineMessages, IntlShape} from 'react-intl';\n\n\ninterface Input {\n  type: string;\n  options?: string[];\n  placeholder?: string;\n  currentValue: string;\n}\nexport interface Question {\n  id: string;\n  next?: string;\n  previous?: string;\n  question?: string;\n  input?: Input;\n  options?: string[]\n  onChange?: (event:any) => void;\n}\n\ninterface useQuestionsParams {\n  intl: IntlShape\n}\n\nconst messages = defineMessages({\n  firstNameQuestion: {\n    id: 'App.firstNameQuestion',\n    defaultMessage: `What's your fist name?`\n  },\n  occupationQuestion: {\n    id: 'App.occupation',\n    defaultMessage: `What's your occupation?`\n  },\n  doYouHaveChildrenQuestion: {\n    id: 'App.doYouHaveChildrenQuestion',\n    defaultMessage: `Do you have children?`\n  },\n  howManyChildrenQuestion: {\n    id: 'App.howManyChildrenQuestion',\n    defaultMessage: `How many children do you have?`\n  },\n  emailQuestion: {\n    id: 'App.emailQuestion',\n    defaultMessage: `What's your email?`\n  }\n});\n\nexport function useQuestions({intl}: useQuestionsParams): Question[] {\n  const {formatMessage} = intl;\n  const [firstName, setFirstName] = useState('');\n  const [occupation, setOccupation] = useState('Employed');\n  const [children, setChildren] = useState('Yes')\n  const [howMany, setHowMany] = useState('0');\n  const [email, setEmail] = useState('')\n\n  return [\n    {\n      id: \"firstName\",\n      previous: \"/\",\n      next: \"occupation\",\n      input: {\n        type: \"text\",\n        placeholder: \"Your name here\",\n        currentValue: firstName,\n      },\n      question: formatMessage(messages.firstNameQuestion),\n      onChange: (event) => {\n        setFirstName(event.target.value);\n      },\n    },\n    {\n      id: \"occupation\",\n      previous: \"firstName\",\n      next: \"children\",\n      input: {\n        type: \"radio\",\n        options: [\"Employed\", \"SelfEmployed\", \"Student\"],\n        currentValue: occupation,\n      },\n      question: formatMessage(messages.occupationQuestion),\n      onChange: (event) => {\n        setOccupation(event.target.value);\n      },\n    },\n    {\n      id: \"children\",\n      previous: \"occupation\",\n      next: children === \"Yes\" ? \"howMany\" : \"emailAddress\",\n      input: {\n        type: \"radio\",\n        options: [\"Yes\", \"No\"],\n        currentValue: children,\n      },\n      question: formatMessage(messages.doYouHaveChildrenQuestion),\n      onChange: (event) => {\n        setChildren(event.target.value);\n      },\n    },\n    {\n      id: \"howMany\",\n      previous: \"children\",\n      next: \"emailAddress\",\n      input: {\n        type: \"text\",\n        placeholder: \"1\",\n        currentValue: howMany,\n      },\n      question: formatMessage(messages.howManyChildrenQuestion),\n      onChange: (event) => {\n        setHowMany(event.target.value);\n      },\n    },\n    {\n      id: \"emailAddress\",\n      previous: children === \"Yes\" ? \"howMany\" : \"children\",\n      next: \"save\",\n      input: {\n        type: \"text\",\n        placeholder: \"jorge.parga@pluma.com\",\n        currentValue: email,\n      },\n      question: formatMessage(messages.emailQuestion),\n      onChange: (event) => {\n        setEmail(event.target.value);\n      },\n    },\n  ];\n}\n","import { defineMessages, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\n\nconst messages = defineMessages({\n  signIn: {\n    id: 'Home.signIn',\n    defaultMessage: 'Sign In',\n  },\n  signInEmail: {\n    id: 'Home.signInEmail',\n    defaultMessage: 'What is your sign-in email address?',\n  },\n  emailPlaceholder: {\n    id: 'Home.emailPlaceholder',\n    defaultMessage: 'Your email address'\n  },\n  continue: {\n    id: 'Home.continue',\n    defaultMessage: 'Continue',\n  },\n});\n\nexport function Home () {\n  const {formatMessage } = useIntl();\n  const history = useHistory();\n  const navigate = (url) => history.push(url);\n  return (\n    <div className=\"home-container\">\n      <h1 className=\"p-h1\">{formatMessage(messages.signIn)}</h1>\n      <div>\n        <h4 className=\"p-h4\">{formatMessage(messages.signInEmail)}</h4>\n        <input\n          id=\"email\"\n          className=\"p-input d-block mt8 wmx6\"\n          type=\"email\"\n          placeholder={formatMessage(messages.emailPlaceholder)}\n        />\n        <button\n          className=\"p-btn p-btn--primary wmn3 mt16\"\n          onClick={() => navigate(\"/firstName\")}\n        >\n          {formatMessage(messages.continue)}\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { ReactElement } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { Question as QuestionType } from '../hooks/useQuestions'\n\ninterface QuestionParams {\n  question: QuestionType\n}\n\nconst messages = defineMessages({\n    previous: {\n        id: 'Question.previous',\n        defaultMessage: '< Previous'\n    },\n    next: {\n        id: 'Question.next',\n        defaultMessage: 'Next >'\n    }\n})\n\nexport function Question ({question}: QuestionParams): ReactElement {\n  const {previous, next, question: label} = question;\n  const {formatMessage} = useIntl();\n  const history = useHistory();\n  const navigate = (url) => history.push(url);\n\n  const inputField =\n    question.input.type === \"text\" ? (\n      <Text\n        placeholder={question.input.placeholder}\n        onChange={question.onChange}\n        currentValue={question.input.currentValue}\n      />\n    ) : (\n      <Radio\n        options={question.input.options}\n        onChange={question.onChange}\n        currentValue={question.input.currentValue}\n      />\n    );\n\n  return (\n    <div className=\"question\">\n      <h4 className=\"p-h4\">{label}</h4>\n      {inputField}\n      <div className=\"buttons\">\n        <button\n          className=\"p-btn p-btn--primary mt16 ws2\"\n          onClick={() => navigate(previous)}\n        >\n          {formatMessage(messages.previous)}\n        </button>\n        <button\n          className=\"p-btn--primary mt16 ws2\"\n          onClick={() => navigate(next)}\n        >\n          {formatMessage(messages.next)}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction Text({placeholder, onChange, currentValue}) {\n  return (\n    <input\n      className=\"p-input d-block mt8 wmx6\"\n      placeholder={placeholder}\n      onChange={onChange}\n      value={currentValue}\n    />\n  );\n}\n\nfunction Radio({options, onChange, currentValue}) {\n  return (\n    <div className=\"p-label-container mt8\">\n      {options.map((option, i) => (\n        <div key={i}>\n          <input\n            id={`default-${i}`}\n            className=\"p-radio\"\n            type=\"radio\"\n            value={option}\n            onChange={onChange}\n            checked={currentValue === option}\n          />\n          <label htmlFor={`default-${i}`} className=\"p-label\">\n            {option}\n          </label>\n        </div >\n      ))}\n    </div>\n  );\n}\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { Route, Switch } from 'react-router-dom';\nimport { useQuestions } from '../hooks/useQuestions';\nimport { Home } from './Home';\nimport { Question } from './Question';\n\nexport function Main() {\n  const intl = useIntl();\n  const questions = useQuestions({intl});\n  return (\n    <div className=\"App\">\n      <Switch>\n        {questions.map((question, i) =>(\n          <Route key={i} path={`/${question.id}`} >\n            <Question question={question} />\n          </Route>\n        ))}\n        <Route path=\"/\" >\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  )\n}\n","import React, { ReactElement, useState } from 'react';\nimport './App.css';\nimport '@popsure/dirty-swan/dist/index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport {default as englishDictionary} from './__locales__/en.json';\nimport {default as spanishDictionary} from './__locales__/es.json';\nimport { Header } from './components/Header';\nimport { Main } from './components/Main';\n\nconst messages = {\n  'en': englishDictionary,\n  'es': spanishDictionary\n}\n\n\nfunction App(): ReactElement {\n  const [locale, setlocale] = useState('en');\n  return (\n    <IntlProvider locale={locale} messages={messages[locale]}>\n      <Router basename=\"/pluma\">\n        <Header setLocale={setlocale} locale={locale}/>\n        <Main/>\n      </Router>\n    </IntlProvider>\n  );\n}\n\n\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}